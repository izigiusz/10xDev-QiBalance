@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using QiBalance.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@inherits LayoutComponentBase

<CascadingAuthenticationState>
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4 d-flex justify-content-end align-items-center">
                <AuthorizeView>
                    <Authorized>
                        <span class="text-muted me-3">
                            <i class="bi bi-person-circle me-1"></i>
                            @context.User.FindFirst(ClaimTypes.Email)?.Value
                        </span>
                        <button class="btn btn-outline-danger btn-sm" @onclick="HandleLogout" disabled="@isLoggingOut">
                            @if (isLoggingOut)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                <span>Wylogowywanie...</span>
                            }
                            else
                            {
                                <i class="bi bi-box-arrow-right me-1"></i>
                                <span>Wyloguj</span>
                            }
                        </button>
                    </Authorized>
                    <NotAuthorized>
                        <a href="/login" class="btn btn-primary btn-sm me-2">
                            <i class="bi bi-box-arrow-in-right me-1"></i>
                            Zaloguj się
                        </a>
                        <a href="/register" class="btn btn-outline-primary btn-sm">
                            <i class="bi bi-person-plus me-1"></i>
                            Rejestracja
                        </a>
                    </NotAuthorized>
                </AuthorizeView>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
</CascadingAuthenticationState>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool isLoggingOut = false;
    
    private async Task HandleLogout()
    {
        // Zapobiegaj wielokrotnym jednoczesnym wywołaniom
        if (isLoggingOut) return;
        
        try
        {
            isLoggingOut = true;
            StateHasChanged(); // Aktualizuj UI, aby pokazać stan ładowania
            
            // Użyj dedykowanego serwisu uwierzytelniania
            await AuthService.SignOutAsync();
        }
        catch (Exception ex)
        {
            // W przypadku błędu, po prostu przekieruj
            Navigation.NavigateTo("/", forceLoad: true);
        }
        finally
        {
            isLoggingOut = false;
        }
    }
}
