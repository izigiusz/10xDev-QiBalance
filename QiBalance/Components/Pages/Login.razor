@page "/login"
@rendermode InteractiveServer
@using QiBalance.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>Logowanie - QiBalance</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Logowanie</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="email" class="form-label">Email:</label>
                            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Hasło:</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                Zaloguj się
                            </button>
                        </div>
                    </EditForm>

                    <div class="text-center mt-3">
                        <p>Nie masz konta? <a href="/register">Zarejestruj się</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var result = await AuthService.SignInAsync(loginModel.Email, loginModel.Password);
            
            if (result?.AccessToken != null)
            {
                await JSRuntime.InvokeVoidAsync("eval", $"document.cookie = 'sb-access-token={result.AccessToken}; path=/; SameSite=Lax; max-age=3600'");
                
                if (AuthStateProvider is SupabaseAuthenticationStateProvider supabaseProvider)
                {
                    supabaseProvider.NotifyAuthenticationStateChanged();
                }
                
                Navigation.NavigateTo("/", forceLoad: false);
            }
            else
            {
                errorMessage = "Nieprawidłowy email lub hasło.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Wystąpił błąd podczas logowania. Spróbuj ponownie.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Nieprawidłowy format email")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Hasło jest wymagane")]
        [MinLength(6, ErrorMessage = "Hasło musi mieć co najmniej 6 znaków")]
        public string Password { get; set; } = string.Empty;
    }
} 